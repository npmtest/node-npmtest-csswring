{"/home/travis/build/npmtest/node-npmtest-csswring/test.js":"/* istanbul instrument in package npmtest_csswring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csswring/lib.npmtest_csswring.js":"/* istanbul instrument in package npmtest_csswring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_csswring = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_csswring = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-csswring/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-csswring && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_csswring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_csswring\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_csswring.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_csswring.rollup.js'] =\n            local.assetsDict['/assets.npmtest_csswring.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_csswring.__dirname + '/lib.npmtest_csswring.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csswring/node_modules/csswring/index.js":"\"use strict\";\n\nconst color = require(\"./lib/color\");\nconst list = require(\"postcss/lib/list\");\nconst onecolor = require(\"onecolor\");\nconst pkg = require(\"./package.json\");\nconst postcss = require(\"postcss\");\nconst re = require(\"./lib/regexp\");\nconst unit = require(\"./lib/unit\");\n\n// Check comment is a source map annotation or not\nfunction isSourceMapAnnotation(comment) {\n  if (\n    comment.parent.type === \"root\" &&\n    comment.parent.last === comment &&\n    comment.text.toLowerCase().indexOf(\"# sourcemappingurl=\") === 0\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n// Set quotation mark\nfunction setQuote(quote) {\n  if (!quote) {\n    quote = \"\\\"\";\n  }\n\n  return quote;\n}\n\n// Check string can unquote or not\nfunction canUnquote(str) {\n  const firstChar = str.slice(0, 1);\n  let secondChar;\n\n  if (re.number.test(firstChar)) {\n    return false;\n  }\n\n  secondChar = str.slice(1, 2);\n\n  if (\n    firstChar === \"-\" &&\n    (secondChar === \"-\" || secondChar === \"\" || re.number.test(secondChar))\n  ) {\n    return false;\n  }\n\n  if (re.sequenceOfIdentifiers.test(str)) {\n    return true;\n  }\n\n  return false;\n}\n\n// Unquote font family name if possible\nfunction unquoteFontFamily(family) {\n  let quote;\n\n  if (family.match(re.varFunction)) {\n    return family;\n  }\n\n  family = family.replace(re.quotedString, \"$2\");\n  quote = setQuote(RegExp.$1);\n\n  if (!list.space(family).every(canUnquote)) {\n    family = `${quote}${family}${quote}`;\n  }\n\n  return family;\n}\n\n// Convert colors to HEX or `rgba()` notation\nfunction toRGBColor(m, leading, c) {\n  c = onecolor(c);\n\n  /* istanbul ignore if  */\n  // Return unmodified value when `one.color` failed to parse `c`\n  if (!c) {\n    return m;\n  }\n\n  if (c.alpha() < 1) {\n    return `${leading}${c.cssa()}`;\n  }\n\n  return `${leading}${c.hex()} `;\n}\n\n// Convert to shortest color\nfunction toShortestColor(m, leading, r1, r2, g1, g2, b1, b2) {\n  let c = `#${r1}${r2}${g1}${g2}${b1}${b2}`;\n\n  if (r1 === r2 && g1 === g2 && b1 === b2) {\n    c = `#${r1}${g1}${b1}`;\n  }\n\n  if (color.shortest.hasOwnProperty(c)) {\n    c = color.shortest[c];\n  }\n\n  return `${leading}${c.toLowerCase()}`;\n}\n\n// Remove unit from 0 length and 0 percentage if possible\nfunction removeUnitOfZero(prop, m, leading, num, u, position, value) {\n  if (\n    prop === \"flex\" ||\n    prop === \"-ms-flex\" ||\n    prop === \"-webkit-flex\" ||\n    prop === \"flex-basis\" ||\n    prop === \"-webkit-flex-basis\" ||\n    value.indexOf(\"calc(\") !== -1\n  ) {\n    return m;\n  }\n\n  if (unit.forZero.hasOwnProperty(u)) {\n    num = `${num}${unit.forZero[u]}`;\n  }\n\n  return `${leading}${num}`;\n}\n\n// Convert to shortest time\nfunction toShortestTime(m, leading, n) {\n  return `${leading}${(parseInt(n, 10) / 100).toString().replace(/^0+/, \"\")}s`;\n}\n\n// Convert to shortest angle\nfunction toShortestAngle(m, leading, n, u) {\n  n = parseInt(n, 10);\n\n  if (Number.isInteger(n / 10)) {\n    return `${leading}${(n * (360 / 400))}deg`;\n  }\n\n  return `${leading}${n}${u}`;\n}\n\n// Unquote inside `url()` notation if possible\nfunction unquoteURL(m, leading, url) {\n  let quote;\n\n  url = url.replace(re.quotedString, \"$2\");\n  quote = setQuote(RegExp.$1);\n  url = url.replace(re.escapedBraces, \"$1\");\n\n  if (re.urlNeedQuote.test(url)) {\n    url = `${quote}${url}${quote}`;\n  }\n\n  return `${leading}url(${url})`;\n}\n\n// Remove white spaces inside `calc()` notation\nfunction removeCalcWhiteSpaces(m, leading, calc) {\n  return `${leading}calc(${calc.replace(\n    re.whiteSpacesBothEndsOfSymbol,\n    \"$1\"\n  )})`;\n}\n\n// Wring value of declaration\nfunction wringValue(prop, value) {\n  return value.replace(\n    re.colorFunction,\n    toRGBColor\n  ).replace(\n    re.colorHex,\n    toShortestColor\n  ).replace(\n    re.colorTransparent,\n    \"$1transparent \"\n  ).trim().replace(\n    re.whiteSpaces,\n    \" \"\n  ).replace(\n    re.whiteSpacesAfterSymbol,\n    \"$1\"\n  ).replace(\n    re.whiteSpacesBeforeSymbol,\n    \"$1\"\n  ).replace(\n    re.numberLeadingZeros,\n    \"$1$2\"\n  ).replace(\n    re.zeroValueUnit,\n    removeUnitOfZero.bind(null, prop)\n  ).replace(\n    re.decimalWithZeros,\n    \"$1$2$3.$4\"\n  ).replace(\n    re.timeEndsWithZero,\n    toShortestTime\n  ).replace(\n    re.angle,\n    toShortestAngle\n  ).replace(\n    re.freqEndsWithThreeZeros,\n    \"$1$2kHz\"\n  ).replace(\n    re.urlFunction,\n    unquoteURL\n  ).replace(\n    re.calcFunction,\n    removeCalcWhiteSpaces\n  );\n}\n\n// Unquote attribute selector if possible\nfunction unquoteAttributeSelector(m, att, con, val) {\n  let quote;\n\n  if (!con || !val) {\n    return `[${att}]`;\n  }\n\n  val = val.trim().replace(re.quotedString, \"$2\");\n  quote = setQuote(RegExp.$1);\n\n  if (!canUnquote(val)) {\n    val = `${quote}${val}${quote}`;\n  }\n\n  return `[${att}${con}${val}]`;\n}\n\n// Remove white spaces from string\nfunction removeWhiteSpaces(string) {\n  return string.replace(re.whiteSpaces, \"\");\n}\n\n// Remove white spaces from both ends of `:not()`\nfunction trimNegationFunction(m, not) {\n  return `:not(${  not.trim()  })`;\n}\n\n// Remove white spaces around `>`, `+`, and `~`, but not `\\>`, `\\+`, and `\\~`\nfunction trimSelectorCombinator(m, combinator, backslash) {\n  if (backslash) {\n    return ` ${  combinator  } `;\n  }\n\n  return combinator;\n}\n\n// Wring selector of ruleset\nfunction wringSelector(selector) {\n  return selector.replace(\n    re.whiteSpaces,\n    \" \"\n  ).replace(\n    re.selectorAtt,\n    unquoteAttributeSelector\n  ).replace(\n    re.selectorFunctions,\n    removeWhiteSpaces\n  ).replace(\n    re.selectorNegationFunction,\n    trimNegationFunction\n  ).replace(\n    re.selectorCombinators,\n    trimSelectorCombinator\n  ).replace(\n    re.selectorPseudoElements,\n    \"$1\"\n  ).replace(\n    re.selectorVerboseUniversal,\n    \"$1\"\n  );\n}\n\n// Check keyframe is valid or not\nfunction isValidKeyframe(keyframe) {\n  if (keyframe === \"from\" || keyframe === \"to\") {\n    return true;\n  }\n\n  keyframe = parseFloat(keyframe);\n\n  if (!isNaN(keyframe) && keyframe >= 0 && keyframe <= 100) {\n    return true;\n  }\n\n  return false;\n}\n\n// Unique array element\nfunction uniqueArray(array) {\n  let i;\n  let l;\n  const result = [];\n  let value;\n\n  for (i = 0, l = array.length; i < l; i++) {\n    value = array[i];\n\n    if (result.indexOf(value) < 0) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\n// Remove duplicate declaration\nfunction removeDuplicateDeclaration(decls, decl) {\n  const d = `${decl.raws.before}${decl.prop}${decl.raws.between}${decl.value}`;\n\n  if (decls.hasOwnProperty(d)) {\n    decls[d].remove();\n  }\n\n  decls[d] = decl;\n}\n\n// Check required `@font-face` descriptor or not\nfunction isRequiredFontFaceDescriptor(decl) {\n  const prop = decl.prop;\n\n  return (prop === \"src\") || (prop === \"font-family\");\n}\n\n// Remove `@font-face` descriptor with default value\nfunction removeDefaultFontFaceDescriptor(decl) {\n  const prop = decl.prop;\n  const value = decl.value;\n\n  if (\n    (re.descriptorFontFace.test(prop) && value === \"normal\") ||\n    (prop === \"unicode-range\" && re.unicodeRangeDefault.test(value)) ||\n    `${prop}${value}` === \"font-weight400\"\n  ) {\n    decl.remove();\n  }\n}\n\n// Quote `@import` URL\nfunction quoteImportURL(m, quote, url) {\n  quote = setQuote(quote);\n\n  return `${quote}${url}${quote}`;\n}\n\n// Quote `@namespace` URL\nfunction quoteNamespaceURL(param, index, p) {\n  let quote;\n\n  if (param === p[p.length - 1]) {\n    param = param.replace(re.quotedString, \"$2\");\n    quote = setQuote(RegExp.$1);\n    param = `${quote}${param}${quote}`;\n  }\n\n  return param;\n}\n\n// Wring comment\nfunction wringComment(removeAllComments, comment) {\n  if (\n    (removeAllComments || comment.text.indexOf(\"!\") !== 0) &&\n    !isSourceMapAnnotation(comment)\n  ) {\n    comment.remove();\n\n    return;\n  }\n\n  comment.raws.before = \"\";\n}\n\n// Wring declaration\nfunction wringDecl(preserveHacks, decl) {\n  const prop = decl.prop;\n\n  let before = decl.raws.before;\n  let between = decl.raws.between;\n  let value = decl.value;\n  let values;\n\n  if (!prop.match(re.validProp)) {\n    decl.remove();\n\n    return;\n  }\n\n  if (\n    !preserveHacks &&\n    (\n      (before && before.match(re.hackSignProp) !== null) ||\n      (between && between.match(re.hackPropComment) !== null)\n    )\n  ) {\n    decl.remove();\n\n    return;\n  }\n\n  if (preserveHacks && before) {\n    before = before.replace(\n      re.semicolons,\n      \"\"\n    ).replace(\n      re.whiteSpaces,\n      \"\"\n    );\n  } else {\n    before = \"\";\n  }\n\n  decl.raws.before = before;\n\n  if (preserveHacks && between) {\n    between = between.replace(re.whiteSpaces, \"\");\n  } else {\n    between = \":\";\n  }\n\n  decl.raws.between = between;\n\n  if (decl.important) {\n    decl.raws.important = \"!important\";\n  }\n\n  if (decl.raws.value) {\n    decl.raws.value = decl.raws.value.raw.trim();\n  }\n\n  if (prop === \"content\") {\n    return;\n  }\n\n  if (prop === \"font-family\") {\n    decl.value = list.comma(value).map(unquoteFontFamily).join(\",\");\n\n    return;\n  }\n\n  values = list.comma(value);\n  value = values.map(wringValue.bind(null, prop)).join(\",\");\n\n  if (re.propertyMultipleValues.test(prop)) {\n    values = list.space(value);\n\n    if (values.length === 4 && values[1] === values[3]) {\n      values.splice(3, 1);\n    }\n\n    if (values.length === 3 && values[0] === values[2]) {\n      values.splice(2, 1);\n    }\n\n    if (values.length === 2 && values[0] === values[1]) {\n      values.splice(1, 1);\n    }\n\n    value = values.join(\" \");\n  }\n\n  if (prop === \"font-weight\") {\n    if (value === \"normal\") {\n      value = \"400\";\n    } else if (value === \"bold\") {\n      value = \"700\";\n    }\n  }\n\n  decl.value = value;\n}\n\n// Wring declaration like string\nfunction wringDeclLike(m, prop, value) {\n  const decl = postcss.decl({\n    prop: prop,\n    value: value\n  });\n\n  wringDecl.call(null, false, decl);\n\n  return `(${  decl.toString()  })`;\n}\n\n// Wring ruleset\nfunction wringRule(rule) {\n  let decls;\n  let parent;\n  let selectors;\n\n  rule.raws.before = \"\";\n  rule.raws.between = \"\";\n  rule.raws.semicolon = false;\n  rule.raws.after = \"\";\n\n  if (rule.nodes.length === 0 || rule.selector === \"\") {\n    rule.remove();\n\n    return;\n  }\n\n  parent = rule.parent;\n  selectors = rule.selectors.map(wringSelector);\n\n  if (parent.type === \"atrule\" && parent.name === \"keyframes\") {\n    selectors = selectors.filter(isValidKeyframe);\n\n    if (selectors.length === 0) {\n      rule.remove();\n\n      return;\n    }\n  }\n\n  rule.selector = uniqueArray(selectors).join(\",\");\n  decls = {};\n  rule.each(removeDuplicateDeclaration.bind(null, decls));\n}\n\n// Filter at-rule\nfunction filterAtRule(flag, rule) {\n  const name = rule.name;\n  const type = rule.type;\n\n  if (type === \"comment\") {\n    return;\n  }\n\n  if (\n    type !== \"atrule\" ||\n    (name !== \"charset\" && name !== \"import\")\n  ) {\n    flag.filter = true;\n\n    return;\n  }\n\n  if (name === \"charset\" && !flag.charset) {\n    flag.charset = true;\n\n    return;\n  }\n\n  if (flag.filter || (name === \"charset\" && flag.charset)) {\n    rule.remove();\n\n    return;\n  }\n}\n\n// Wring at-rule\nfunction wringAtRule(atRule) {\n  let params;\n\n  atRule.raws.before = \"\";\n  atRule.raws.afterName = \" \";\n  atRule.raws.between = \"\";\n  atRule.raws.semicolon = false;\n  atRule.raws.after = \"\";\n\n  if (!atRule.params) {\n    atRule.params = \"\";\n  }\n\n  if (atRule.name === \"charset\") {\n    return;\n  }\n\n  if (atRule.name === \"font-face\") {\n    if (atRule.nodes.filter(isRequiredFontFaceDescriptor).length < 2) {\n      atRule.remove();\n\n      return;\n    }\n\n    atRule.each(removeDefaultFontFaceDescriptor);\n  }\n\n  if (atRule.nodes && atRule.nodes.length === 0) {\n    atRule.remove();\n\n    return;\n  }\n\n  params = atRule.params.replace(\n    re.whiteSpaces,\n    \" \"\n  ).replace(\n    re.whiteSpacesAfterSymbol,\n    \"$1\"\n  ).replace(\n    re.whiteSpacesBeforeSymbol,\n    \"$1\"\n  );\n\n  if (atRule.name === \"import\") {\n    params = params.replace(\n      re.urlFunction,\n      \"$1$2\"\n    ).replace(\n      re.quotedString,\n      quoteImportURL\n    );\n  }\n\n  if (atRule.name === \"namespace\") {\n    params = list.space(\n      params.replace(re.urlFunction, \"$1$2\")\n    ).map(quoteNamespaceURL).join(\"\");\n  }\n\n  if (atRule.name === \"keyframes\") {\n    params = params.replace(re.quotedString, \"$2\");\n  }\n\n  if (atRule.name === \"supports\") {\n    params = params.replace(re.declInParentheses, wringDeclLike);\n  }\n\n  atRule.params = params;\n\n  if (\n    atRule.params === \"\" ||\n    params.indexOf(\"(\") === 0 ||\n    params.indexOf(\"\\\"\") === 0 ||\n    params.indexOf(\"'\") === 0\n  ) {\n    atRule.raws.afterName = \"\";\n  }\n}\n\nmodule.exports = postcss.plugin(pkg.name, function (opts) {\n  if (!opts) {\n    opts = {};\n  }\n\n  if (!opts.preserveHacks) {\n    opts.preserveHacks = false;\n  }\n\n  if (!opts.removeAllComments) {\n    opts.removeAllComments = false;\n  }\n\n  return function (css) {\n    css.raws.semicolon = false;\n    css.raws.after = \"\";\n    css.walkComments(wringComment.bind(null, opts.removeAllComments));\n    css.walkDecls(wringDecl.bind(null, opts.preserveHacks));\n    css.walkRules(wringRule);\n    css.each(filterAtRule.bind(null, {\n      charset: false,\n      filter: false\n    }));\n    css.walkAtRules(wringAtRule);\n\n    return css;\n  };\n});\n\nmodule.exports.wring = function (css, opts) {\n  return postcss([\n    this(opts)\n  ]).process(css, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-csswring/node_modules/csswring/lib/color.js":"\"use strict\";\n\nconst color = exports;\n\ncolor.shortest = {\n  \"#f00\": \"red\",\n  \"#000080\": \"navy\",\n  \"#008000\": \"green\",\n  \"#008080\": \"teal\",\n  \"#4b0082\": \"indigo\",\n  \"#800000\": \"maroon\",\n  \"#800080\": \"purple\",\n  \"#808000\": \"olive\",\n  \"#808080\": \"gray\",\n  \"#a0522d\": \"sienna\",\n  \"#a52a2a\": \"brown\",\n  \"#c0c0c0\": \"silver\",\n  \"#cd853f\": \"peru\",\n  \"#d2b48c\": \"tan\",\n  \"#da70d6\": \"orchid\",\n  \"#dda0dd\": \"plum\",\n  \"#ee82ee\": \"violet\",\n  \"#f0e68c\": \"khaki\",\n  \"#f0ffff\": \"azure\",\n  \"#f5deb3\": \"wheat\",\n  \"#f5f5dc\": \"beige\",\n  \"#fa8072\": \"salmon\",\n  \"#faf0e6\": \"linen\",\n  \"#ff6347\": \"tomato\",\n  \"#ff7f50\": \"coral\",\n  \"#ffa500\": \"orange\",\n  \"#ffc0cb\": \"pink\",\n  \"#ffd700\": \"gold\",\n  \"#ffe4c4\": \"bisque\",\n  \"#fffafa\": \"snow\",\n  \"#fffff0\": \"ivory\"\n};\n","/home/travis/build/npmtest/node-npmtest-csswring/node_modules/csswring/lib/regexp.js":"\"use strict\";\n\nconst re = exports;\n\n// 123grad\nre.angle = /(^|\\s|\\(|,)([1-9]\\d*)(grad)/gi;\n\n// calc(1 + 1)\nre.calcFunction = /(^|\\s|\\(|,)calc\\((([^()]*(\\([^()]*\\))?)*)\\)/;\n\n// rgb(0, 0, 0), hsl(0, 0%, 0%), rgba(0, 0, 0, 1), hsla(0, 0%, 0%, 1)\nre.colorFunction = /(^|\\s|\\(|,)((?:rgb|hsl)a?\\(.*?\\))/gi;\n\n// #000, #000000\nre.colorHex = /(^|\\s|\\(|,)#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])/gi;\n\n// rgba(0,0,0,0)\nre.colorTransparent = /(^|\\s|\\(|,)rgba\\(0,0,0,0\\)/gi;\n\n// 0.1\nre.decimalWithZeros = /(^|\\s|\\(|,)(-)?0*([1-9]\\d*)?\\.(\\d*[1-9])0*/g;\n\n// (top: 0)\nre.declInParentheses = /\\(([-a-zA-Z]+):(([^()]*(\\([^()]*\\))?)*)\\)/g;\n\n// font-style, font-stretch, font-variant, font-feature-settings\nre.descriptorFontFace = /^font-(style|stretch|variant|feature-settings)$/i;\n\n// \\(, \\)\nre.escapedBraces = /\\\\([()])/g;\n\n// 1000Hz\nre.freqEndsWithThreeZeros = /(^|\\s|\\(|,)(\\d+)000Hz/gi;\n\n// /**/, /*\\**/\nre.hackPropComment = /\\/\\*(\\\\\\*)?\\*\\//;\n\n// _, *\nre.hackSignProp = /[_*]$/;\n\n// 0\nre.number = /\\d/;\n\n// 01\nre.numberLeadingZeros = /(^|\\s|\\(|,)0+([1-9]\\d*(\\.\\d+)?)/g;\n\n// margin, padding, border-color, border-radius, border-spacing, border-style, border-width\nre.propertyMultipleValues = /^(margin|padding|border-(color|radius|spacing|style|width))$/i;\n\n// \"...\", '...'\nre.quotedString = /(\"|')?(.*)\\1/;\n\n// [class = \"foo\"], [class ~= \"foo\"], [class |= \"foo\"], [class ^= \"foo\"], [class $= \"foo\"], [class *= \"foo\"]\nre.selectorAtt = /\\[\\s*(.*?)(?:\\s*([~|^$*]?=)\\s*((\"|').*\\4|.*?[^\\\\]))?\\s*\\]/g;\n\n// p > a, p + a, p ~ a\nre.selectorCombinators = /\\s+((\\\\?)[>+~])\\s+/g;\n\n// :lang(ja), :nth-child(0), nth-last-child(0), nth-of-type(1n), nth-last-of-type(1n)\nre.selectorFunctions = /:(lang|nth-(?:last-)?(?:child|of-type))\\((.*?[^\\\\])\\)/gi;\n\n// :not(a)\nre.selectorNegationFunction = /:not\\((([^()]*(\\([^()]*\\))?)*)\\)/gi;\n\n// ::before, ::after, ::first-line, ::first-letter\nre.selectorPseudoElements = /(:)\\1(?=after|before|first-(letter|line))/g;\n\n// *#foo, *.bar, *:link, *[baz]\nre.selectorVerboseUniversal = /\\*([#.:[])/g;\n\n// ;\nre.semicolons = /;/g;\n\n// ident-ifi-ers\nre.sequenceOfIdentifiers = /^[\\w-]+$/;\n\n// 3210ms\nre.timeEndsWithZero = /(^|\\s|\\(|,)(\\d{2,})0ms/gi;\n\n// u0-10ffff, u000000-10ffff\nre.unicodeRangeDefault = /u\\+0{1,6}-10ffff/i;\n\n// url(a)\nre.urlFunction = /(^|\\s|\\(|,)url\\((.*?[^\\\\])\\)(?=$|\\s|\\)|,)/gi;\n\n//  , (, ), \", '\nre.urlNeedQuote = /[\\s()\"']/;\n\n// --valid_prop-name\nre.validProp = /^-{0,2}[^!-,./:-@[-^`{-~]+$/i;\n\n// var(--custom-prop-name)\nre.varFunction = /^var\\([\\w-]+\\)$/i;\n\n//  , \\t, \\r, \\n\nre.whiteSpaces = /\\s+/g;\nre.whiteSpacesAfterSymbol = /([(,:])\\s/g;\nre.whiteSpacesBeforeSymbol = /\\s([),:])/g;\nre.whiteSpacesBothEndsOfSymbol = /\\s([*/])\\s/g;\n\n// 0%, 0ch, 0cm, 0deg, 0dpcm, 0dpi, 0dppx, 0em, 0ex, 0grad, 0Hz, 0in, 0kHz, 0mm,\n// 0ms, 0pc, 0pt, 0px, 0rad, 0rem, 0s, 0turn, 0vh, 0vmax, 0vmin, 0vw\nre.zeroValueUnit = /(^|\\s|\\(|,)(0)(%|ch|cm|deg|dpcm|dpi|dppx|em|ex|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmax|vmin|vw)/gi;\n","/home/travis/build/npmtest/node-npmtest-csswring/node_modules/csswring/lib/unit.js":"\"use strict\";\n\nconst unit = exports;\n\nunit.forZero = {\n  \"deg\": \"deg\",\n  \"dpcm\": \"dpi\",\n  \"dpi\": \"dpi\",\n  \"dppx\": \"dpi\",\n  \"grad\": \"deg\",\n  \"Hz\": \"Hz\",\n  \"kHz\": \"Hz\",\n  \"ms\": \"s\",\n  \"rad\": \"deg\",\n  \"s\": \"s\",\n  \"turn\": \"deg\"\n};\n"}